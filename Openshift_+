def applicationservice()
{
    checkout([$class: 'GitSCM', branches: [[name: '*/feature_helm_ver_2']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: 
    [[credentialsId: 'test', url: "git@gitlab.com:k_amal/application-service.git"]]])
}
def compositeservice()
{
    checkout([$class: 'GitSCM', branches: [[name: '*/feature_helm_ver_2']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: 
    [[credentialsId: 'test', url: "git@gitlab.com:k_amal/composite-service.git"]]])
}
def webservice()
{
    checkout([$class: 'GitSCM', branches: [[name: '*/feature_helm_ver_2']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: 
    [[credentialsId: 'test', url: "git@gitlab.com:dishanfernando/openshift-ui.git"]]])
}
def platformservice()
{
    checkout([$class: 'GitSCM', branches: [[name: '*/sprint7']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: 
    [[credentialsId: 'test', url: "git@gitlab.com:ramnar/openshiftplusapi.git "]]])
}
node
{
   def MAVEN_HOME = tool "MAVEN_HOME"
   def JAVA_HOME = tool "JAVA_HOME"
   

		stage('Building docker Image for application-service')
		{
				applicationservice()
				echo "${workspace}"
		        //sh 'sudo mvn clean compile'
		        //sh 'sudo mvn test'
		        sh 'chmod +x build-application-svc.sh'
		        sh 'sudo ./build-application-svc.sh $IMAGE_TAG'
		    
		}
		stage('Building docker Image for composite-service')
		{
		      compositeservice()
		      //sh 'sudo mvn clean compile'
		      //sh 'sudo mvn test'
		      sh 'chmod +x build-composite-svc.sh'
		      sh 'sudo ./build-composite-svc.sh $IMAGE_TAG'
	
		}
		stage('Building docker Image for platform-service')
		{
		      platformservice()
		      //sh 'sudo mvn clean compile'
		      //sh 'sudo mvn test'
		      
		      sh 'chmod +x src/restful-openshiftapp/docker-build.sh'
		      sh 'pwd'
		      sh 'sudo src/restful-openshiftapp/docker-build.sh $IMAGE_TAG'
	
		}
	stage('Building docker Image for UI-service')
		{
		      webservice()
		      //sh 'sudo mvn clean compile'
		      //sh 'sudo mvn test'
		      sh 'chmod +x build-web-svc.sh'
		      sh 'sudo ./build-web-svc.sh $IMAGE_TAG'
	
		}
		stage('Building docker Image for jhipster-service')
		{
		    echo 'Successfully build the image'
		}
		stage('Deploying Platform-Service')
		{
		 sh '/home/lohit/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc login $CLUSTER_URL -u $CLUSTER_USER -p $CLUSTER_PWD --insecure-skip-tls-verify'
		    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: 
    [[credentialsId: 'githelm', url: "https://github.com/rajeshdeshpande02/platform-helmcharts.git"]]])
			sh './helm-client/helm install platfrom-service'
		}
		
		stage('Deploying Jhipster-Service')
		{
			sh './helm-client/helm install jhipster-service'
		}
		
		stage('Deploying Application-Service')
		{
		   
		    sh './helm-client/helm install application-service'
			
		}
	
		stage('Deploying Composite-Service')
		{
			
				sh './helm-client/helm install composite-service'	
			
		}	
		stage('Deploying Web-Service')
		{
			sh './helm-client/helm install web-service'
		}
}
